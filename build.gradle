buildscript {
	configurations {
		all {
			resolutionStrategy {
				cacheDynamicVersionsFor 24, 'hours'
				cacheChangingModulesFor 24, 'hours'
			}
		}
	}
	repositories {
		mavenCentral()
		mavenRepo (name: "Alkemists's GitHub", url: "http://cloud.github.com/downloads/alkemist") {
			pattern = "[organisation]/[module]-[revision].[ext]"
		}
		mavenRepo name: "markdown4j", url: "http://scala-tools.org/repo-releases"
	}
	dependencies {
		classpath "markdown2book:markdown2book:1.0-SNAPSHOT", "org.apache.maven.wagon:wagon-webdav-jackrabbit:1.0-beta-6"
	}
}

dependsOnChildren()

allprojects {
	groovyVersion = "1.7.5"
	spockVersion = "0.5-groovy-1.7"
	
	spockDependency = "org.spockframework:spock-core:$spockVersion"
	groovyDependency = "org.codehaus.groovy:groovy-all:$groovyVersion"
	
	repositories {
		mavenCentral()
		mavenRepo name: "spock-snapshots", url: ["http://m2repo.spockframework.org/snapshots"]
	}
	
	apply plugin: "idea"
}

def groovyModules = [
	":module:remote-core", ":module:remote-transport-local", ":module:remote-transport-http"
]

def publishedModules = [
	":module:remote-core", ":module:remote-transport-local", ":module:remote-transport-http"
]

def publishedGroovyModules = groovyModules.findAll { it in publishedModules }

subprojects {
	version = '0.3'
	group = 'org.codehaus.groovy.modules.remote'
	
	configurations {
		all {
			resolutionStrategy {
				cacheDynamicVersionsFor 24, 'hours'
				cacheChangingModulesFor 24, 'hours'
			}
		}
	}
	
	if (project.path in groovyModules) {
		apply plugin: "groovy"
		apply plugin: "code-quality"
		
		codeNarcConfigFileName = "${rootDir}/config/codenarc/codenarc.xml"
		
		dependencies {
			groovy groovyDependency
			testCompile spockDependency
		}
		
		if (project.hasProperty('t')) {
			test.doFirst {
				test.include "**/${t}*.class"
			}
		}
		
		test.ignoreFailures = true

		sourceCompatibility = 1.5
		targetCompatibility = 1.5
		
		configurations {
			compile.transitive = true
			testCompile.transitive = true
		}
		
		task listCompile(dependsOn: configurations.compile) << {
			println "compile classpath = ${configurations.compile.resolve().collect {File file -> file.name}.sort()}"
		}

		task listRuntime(dependsOn: configurations.runtime) << {
			println "runtime classpath = ${configurations.runtime.resolve().collect {File file -> file.name}.sort()}"
		}
	}
	
	if (project.path in publishedModules) {
		apply plugin: 'maven'
		apply plugin: 'signing'
		
		task sourcesJar(type: Jar, dependsOn: classes) { 
			classifier = 'sources' 
			from sourceSets.main.allSource
		} 

		task javadocJar(type: Jar, dependsOn: javadoc) { 
			classifier = 'javadoc' 
			from javadoc.destinationDir 
		} 

		signing {
			sign configurations.archives
		}
		
		configurations {
			deployerJars
			archives.extendsFrom signatures
		}

		artifacts {
			archives javadocJar
			archives sourcesJar
		}
		
		dependencies {
			deployerJars "org.apache.maven.wagon:wagon-http-lightweight:1.0-beta-6"
		}
		
		project.poms = [install.repositories.mavenInstaller.pom]
		
		if (project.hasProperty('codehausUsername') && project.hasProperty('codehausPassword')) {
			uploadArchives {
				project.deployer = repositories.mavenDeployer {
					beforeDeployment { MavenDeployment deployment ->
						if (signing.signatory) {
							signPom(deployment)
						}
					}
					uniqueVersion = false
					configuration = configurations.deployerJars
					repository(url: "https://nexus.codehaus.org/service/local/staging/deploy/maven2/") {
						authentication(userName: codehausUsername, password: codehausPassword)
					}
					snapshotRepository(url: "https://nexus.codehaus.org/content/repositories/snapshots/") {
						authentication(userName: codehausUsername, password: codehausPassword)
					}
					pom.project {
						name "Geb"
						description "Groovy remote control is a library for executing closures defined in one Groovy application to be executed in a different (possible remote) Groovy application."
						url "http://groovy.codehaus.org/modules/remote"
						inceptionYear "2010"
						licenses {
							license {
								name 'The Apache Software License, Version 2.0'
								url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
								distribution 'repo'
							}
						}
						scm {
							url "https://github.com/alkemist/groovy-remote"
						}
						developers {
							developer {
								id "ldaley"
								name "Luke Daley"
								roles {
									role "Lead"
									role "Founder"
								}
							}
						}
					}
				}
				project.poms << project.deployer.pom 
			}
		}
		
		// Method that subprojects can use to mod the poms
		project.modifyPom = { 
			project.poms*.whenConfigured(it) 
		}
		
		// Remove test deps from all poms
		modifyPom { pom ->
			pom.dependencies.removeAll(pom.dependencies.findAll { it.scope == "test" })
		}
	}
}

project(':module:remote-core') {
	dependencies {
		testCompile project(":module:remote-transport-local"), project(":module:remote-using-lib")
	}
}

project(':module:remote-transport-http') {
	dependencies {
		compile project(":module:remote-core"),
		        "javax.servlet:servlet-api:2.4"
		testCompile "org.mortbay.jetty:jetty:6.1.21"
	}
}

project(':module:remote-transport-local') {
	dependencies {
		compile project(":module:remote-core")
	}
}

project(':module:remote-using-lib') {
	apply plugin: "groovy"

	dependencies {
		groovy groovyDependency
		compile project(":module:remote-core")
	}
}

project(":doc:manual") {
	src = file("src")
	output = file("build/manual")
	
	task compile << {
		new markdown2book.Generator(src, output, "UTF-8").generate()
	}
	
	task copyGroovyDoc(dependsOn: publishedGroovyModules.collect { project(it) }*.groovydoc) << {
		def groovyApi = new File(output, "groovy-api")
		if (!groovyApi.exists()) {
			assert groovyApi.mkdirs()
		}
		
		publishedGroovyModules.collect { module ->
			def baseName = module[module.lastIndexOf(":") + 1 .. module.size() - 1]
			copy {
				from project(module).groovydoc.destinationDir
				into new File(groovyApi, baseName)
			}
		}
	}
	
	task assemble(dependsOn: [compile, copyGroovyDoc], overwrite: true) {}
}

project(":doc:site") {
	src = file("src")
	output = file("build/site")

	manualDir = file("$output/manual")
	thisManual = file("$manualDir/$project.version")
	
	task clean(overwrite: true) << {
		if (output.exists()) {
			assert output.deleteDir()
		}
	}
	
	task includeManual(dependsOn: project(":doc:manual").assemble, type: Sync) {
		from project(":doc:manual").output
		into project.thisManual
		
		doLast {
			ant.symlink link: "${manualDir.path}/latest", resource: thisManual.path, overwrite: true
		}
	}
	
	task copySrc(type: Copy) {
		from src
		into output
	}
	
	task compile(dependsOn: [copySrc, includeManual]) {}
	
	task upload(dependsOn: compile) << {
		if (project.hasProperty('codehausUsername') && project.hasProperty('codehausPassword')) {
			def rep = new org.apache.maven.wagon.repository.Repository("codehaus", "https://dav.codehaus.org/groovy/modules/remote")
			def auth = new org.apache.maven.wagon.authentication.AuthenticationInfo()
			auth.userName = codehausUsername
			auth.password = codehausPassword
			def wagon = new org.apache.maven.wagon.providers.webdav.WebDavWagon()
			wagon.connect(rep, auth)
		
			output.eachFile {
				if (it.directory) {
					wagon.putDirectory(it, it.name)
				} else {
					wagon.put(it, it.name)
				}
			}
		} else {
			println "Can't upload site as credentials aren't set"
		}
	}

}

task wrapper(type: Wrapper) {
	gradleVersion = '1.0-milestone-3'
}